{"version":3,"sources":["components/RoomList.js","components/MessageList.js","components/User.js","App.js","serviceWorker.js","index.js"],"names":["RoomList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rooms","newRoom","roomsRef","firebase","database","ref","_this2","on","snapshot","room","val","key","setState","concat","e","target","value","preventDefault","addRooms","push","name","_this3","_this$state","isEnabled","length","react_default","a","createElement","className","map","index","onClick","handleActiveRoom","onSubmit","createRoom","class","type","size","placeholder","onChange","handleChange","disabled","Component","MessageList","messages","newMessage","roomId","messageRef","message","username","currentUser","displayName","content","sentAt","ServerValue","TIMESTAMP","activeRoom","activeRoomMessage","filter","console","log","formattedTime","Date","toLocaleTimeString","createMessage","handleMessage","User","isLoggedIn","auth","onAuthStateChanged","user","setUser","provider","GoogleAuthProvider","signInWithPopup","signOut","button","userSignIn","userSignOut","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","components_RoomList","components_MessageList","components_User","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4c1440c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass RoomList extends Component {\n\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n    \n        rooms: [],\n        newRoom: '',\n  \n      };\n\n      \n      this.roomsRef = this.props.firebase.database().ref('rooms');\n  }\n\n  componentDidMount() {\n  \n  this.roomsRef.on('child_added', snapshot => {\n    const room = snapshot.val();\n    room.key = snapshot.key;\n      this.setState({ rooms: this.state.rooms.concat( room ) });    \n      });\n    \n  }\n\n  handleChange(e) {\n    this.setState({ newRoom: e.target.value });\n  }\n\n  createRoom(e) {\n    e.preventDefault();\n    let addRooms = this.state.newRoom;\n      this.roomsRef.push({   \n          name: addRooms\n    }); \n    this.setState({ newRoom: '' });\n  }\n\n  \n\n\n   render() {\n     \n     // this is used to disable the buttons when there is an empty value for the room name\n     const { rooms, newRoom } = this.state;\n     const isEnabled = rooms.length > 0 && newRoom.length > 0;\n\n  return (\n       <div className=\"room-container\">  \n     {\n      this.state.rooms.map( (room, index) => {\n        return (\n                     <div className=\"left-sidebar nes-container is-dark is-rounded\">  \n                     <p key={index} onClick={ () => this.props.handleActiveRoom(room) }>{room.name}</p>\n                     </div>\n        );\n      })\n     }\n      <form onSubmit={ (e) => this.createRoom(e) }>\n        <label>\n            <p class=\"room-text-box\">New room name:</p>\n            <input \n              type=\"text\"\n              size=\"12\"\n              placeholder=\"Enter room name\" \n              value={this.state.newRoom} \n              onChange={ (e) => this.handleChange(e) } /> \n          </label>\n          <button disabled={!isEnabled}>Submit</button>\n      </form>\n      </div>\n      \n    )}\n}\n\n\nexport default RoomList;","import React, { Component } from 'react';\n\nclass MessageList extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\n\t\tthis.state = {\n    \n    \t\tmessages: [],\n    \t\tnewMessage: '',\n    \t\troomId: ''\n  \n  \t\t};\n  \t\t\n  \t\tthis.messageRef = this.props.firebase.database().ref('messages');\n\t}\n\n\tcomponentDidMount() {\n\t\t\n\t\tthis.messageRef.on('child_added', snapshot => {\n\t\t\tconst message = snapshot.val();\n\t\t\tmessage.key = snapshot.key;\n    \t\tthis.setState({ messages: this.state.messages.concat( message ) });\n   \t\t});\n\n\t}\n\n\thandleMessage(e) {\n\t  this.setState({ newMessage: e.target.value });\n\t}\n\n\tcreateMessage(e) {\n\t  e.preventDefault();\n\t  let newMessage = this.state.newMessage;\n\t  this.messageRef.push({\n\t    username: this.props.currentUser.displayName || 'Guest',\n\t\tcontent: newMessage,\n\t\tsentAt: this.props.firebase.database.ServerValue.TIMESTAMP,\n\t\troomId: this.props.activeRoom.key\n\t  });\n\t   this.setState({ newMessage: '' });\n\t}\n\n   \trender() {\n\t\n\t\tconst { messages, newMessage } = this.state;\n\t\tconst isEnabled = messages.length > 0 && newMessage.length > 0 && this.props.activeRoom.key != null;\n\n\t\tconst activeRoomMessage = this.state.messages.filter(message => message.roomId === this.props.activeRoom.key);\n        \tconsole.log(activeRoomMessage); // testing the filter\n        \tconsole.log(this.props.activeRoom); \n\t\treturn (\n\t\t\t<div className=\"form-box\">\n\t\t \t{\t\n              activeRoomMessage.map( (message) => {\n\t\t\t  let formattedTime = new Date(message.sentAt).toLocaleTimeString(\"en-US\");\n\t\t\n\t\t\t\treturn(\n\t\t\t\t  <div className=\"nes-container is-dark is-rounded with-title\" key={message.key}>\n                    <p className=\"title\">{message.username}</p>\n                \t<p>{message.content}</p>\n                \t<p>{formattedTime}</p>\n\t\t\t\t  </div>\t\n\t\t\t    );\n\t\t\t  })\n\t\t    }\n\t\t    <form onSubmit={ (e) => this.createMessage(e) }>\n\t\t\t\t<label>\n\t\t    \t\tMessage:\n\t\t  \t\t\t<input type=\"text\"\n\t\t  \t\t\t       placeholder=\"Enter message here\" \n\t\t  \t\t\t       value={this.state.newMessage} \n\t\t  \t\t\t       onChange={ (e) => this.handleMessage(e) } /> \n\t\t   \t\t</label>\n\t\t  \t\t\t<button disabled={!isEnabled}>Submit</button>\n\t\t  \t</form>\n\t\t\t</div>\n\t\t);  \n\t}\n\n}\n\nexport default MessageList;","import React, { Component } from 'react';\n\nclass User extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\n\t\tthis.state = {\n\n\t\t\tisLoggedIn: false\n  \n  \t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.firebase.auth().onAuthStateChanged( user => {\n  \t\tthis.props.setUser(user);\n\t\t});\n\t}\n\n\tuserSignIn(user) {\n\t\tconst provider = new this.props.firebase.auth.GoogleAuthProvider();\n\t\tthis.props.firebase.auth().signInWithPopup( provider );\n\t\tthis.setState({ isLoggedIn: true });\n\t}\n\n\tuserSignOut(user) {\n\t\tthis.props.firebase.auth().signOut();\n\t\tthis.setState({ isLoggedIn: false });\n\t}\n\n\trender() {\n\t\t\n\t\tlet button;\n\t\tlet displayName;\n\n\t\tif (this.state.isLoggedIn === false) {\n\t\t\tbutton = <button className=\"nes-btn is-primary\" onClick={ (user) => this.userSignIn(user) }>Sign In</button>;\n\t\t\tdisplayName = 'Guest';\n\t\t}\t\n\t\t\t\t\n\t\telse {\n\t\t\tbutton = <button className=\"nes-btn is-success\" onClick={ (user) => this.userSignOut(user) }>Sign out</button>;\n\t\t\tdisplayName = this.props.currentUser.displayName;\n\t\t}\n\t\t\t\n\t\treturn (\n\t\t\t<div className=\"signin-box\">\n\t\t\t\t{button}\n\t\t\t\t{displayName}\n\t\t\t</div>\t\t\n\t\t);\n\t}\t\t\t\n}    \t\n\nexport default User;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport './App.css';\nimport RoomList from './components/RoomList';\nimport MessageList from './components/MessageList';\nimport User from './components/User';\n\n// Initialize Firebase\n  var config = {\n    apiKey: \"AIzaSyBoFr5vkorNr8GNHhc-qzX9wCUA0N_k_VE\",\n    authDomain: \"bloc-chat-react-80bc1.firebaseapp.com\",\n    databaseURL: \"https://bloc-chat-react-80bc1.firebaseio.com\",\n    projectId: \"bloc-chat-react-80bc1\",\n    storageBucket: \"bloc-chat-react-80bc1.appspot.com\",\n    messagingSenderId: \"825422430869\"\n};\n  \nfirebase.initializeApp(config);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      \n      activeRoom: '',\n      currentUser: ''\n    \n    };\n\n  }\n\n  handleActiveRoom(room) {\n    this.setState({ activeRoom: room});\n  }\n\n  setUser(user) {\n    this.setState({ currentUser: user || 'Guest' });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n          <h1 className='title'>8-BIT CHAT</h1>\n          <ul>\n            <h3>{this.state.activeRoom.name}</h3>\n            <RoomList firebase={firebase} handleActiveRoom={ (room) => this.handleActiveRoom(room) } />\n            <MessageList firebase={firebase} activeRoom={this.state.activeRoom} currentUser={this.state.currentUser} />\n            <User firebase={firebase} setUser={ (user) => this.setUser(user) } currentUser={this.state.currentUser} />\n          </ul> \n       </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}